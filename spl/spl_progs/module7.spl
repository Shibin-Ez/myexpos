// loadint Library
loadi(63, 13);
loadi(64, 14);

// loading init program
loadi(65,7);
loadi(66,8);

// loading INT7 module
loadi(16,29);
loadi(17,30);

// loading INT10 module
loadi(22,35);
loadi(23,36);

// loading exception handler
loadi(2, 15);
loadi(3, 16);

// loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

// loading idle process
loadi(69, 11);
loadi(70, 12);

// loading even process
loadi(83, 69);

// loading shceduler - MODULE 5
loadi(50, 63);
loadi(51, 64);

// loading prime(3rd) process
loadi(92, 70);

// loading module 0
loadi(40, 53);
loadi(41, 54);

// loading module 4
loadi(48, 61);
loadi(49, 62);

// loadig INT6 module
loadi(14, 27);
loadi(15, 28);

// loading Console interrupt Routine
loadi(8, 21);
loadi(9, 22);

// loading INT9 module
loadi(20, 33);
loadi(21, 34);

// loading module 1
loadi(42, 55);
loadi(43, 56);

// loading module 2
loadi(44, 57);
loadi(45, 58);

// loading inode user table
loadi(59, 3);
loadi(60, 4);

// loading Disk interrupt routine
loadi(6, 19);
loadi(7, 20);

// loading Disk free list
loadi(61, 2);

// terminal, disk status to free
[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

// Page Table  INIT - PROCESS (PID = 1)

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process Table - init
[PROCESS_TABLE + 16 + 1] = 1; // PID of init process
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; // User area page no - init
[PROCESS_TABLE + 16 + 13] = 8*512; // UPTR
[PROCESS_TABLE + 16 + 14] = PTBR; // init
[PROCESS_TABLE + 16 + 15] = PTLR; // init
[PROCESS_TABLE + 16 + 12] = 0; // KPTR - init

// IP when init program starts (Entry Point)
[76*512] = [65 * 512 + 1]; // 2nd entry of page header

// initialize per-process resource table (INIT process)
alias i R0;
alias userAreaPageNo R1;
i = 1;
userAreaPageNo = 80; // for init
while (i < 9) do
  [(userAreaPageNo+1)*512 - i*2] = -1;
  i = i + 1;
endwhile;

// initialize per-process disk map table (INIT)
[DISK_MAP_TABLE + 10 * 1 + 2] = -1;
[DISK_MAP_TABLE + 10 * 1 + 3] = -1;
[DISK_MAP_TABLE + 10 * 1 + 4] = 7;
[DISK_MAP_TABLE + 10 * 1 + 5] = 8;
[DISK_MAP_TABLE + 10 * 1 + 6] = -1;
[DISK_MAP_TABLE + 10 * 1 + 7] = -1;
[DISK_MAP_TABLE + 10 * 1 + 8] = -1;
[DISK_MAP_TABLE + 10 * 1 + 9] = -1;


// Set Process table entries from 2 to TERMINATED
i = 2;
while (i < 16) do
  [PROCESS_TABLE + i*16 + 4] = TERMINATED;
  i = i + 1;
endwhile;

// initialize memory free list
i = 0;
while (i < 83) do
  [MEMORY_FREE_LIST + i] = 1;
  i = i + 1;
endwhile;

while (i < MAX_MEM_PAGE) do
  [MEMORY_FREE_LIST + i] = 0;
  i = i + 1;
endwhile;

// initialize system status table
[SYSTEM_STATUS_TABLE + 2] = MAX_MEM_PAGE - 82; // mem free count
[SYSTEM_STATUS_TABLE + 3] = 0; // wait mem count

return;