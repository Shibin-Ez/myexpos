// loadint Library
loadi(63, 13);
loadi(64, 14);

// loading init program
loadi(65,7);
loadi(66,8);

// loading INT7 module
loadi(16,29);
loadi(17,30);

// loading INT10 module
loadi(22,35);
loadi(23,36);

// loading exception handler
loadi(2, 15);
loadi(3, 16);

// loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

// loading idle process
loadi(69, 11);
loadi(70, 12);

// loading even process
loadi(83, 69);

// loading shceduler - MODULE 5
loadi(50, 63);
loadi(51, 64);

// loading prime(3rd) process
loadi(92, 70);

// loading module 0
loadi(40, 53);
loadi(41, 54);

// loading module 4
loadi(48, 61);
loadi(49, 62);

// terminal status to free
[TERMINAL_STATUS_TABLE] = 0;

// Page Table  INIT - PROCESS (PID = 1)

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process Table - init
[PROCESS_TABLE + 16 + 1] = 1; // PID of init process
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; // User area page no - init
[PROCESS_TABLE + 16 + 13] = 8*512; // UPTR
[PROCESS_TABLE + 16 + 14] = PTBR; // idle
[PROCESS_TABLE + 16 + 15] = PTLR; // idle
[PROCESS_TABLE + 16 + 12] = 0; // KPTR - idle

// IP when init program starts (Entry Point)
[76*512] = [65 * 512 + 1]; // 2nd entry of page header



// Page Table  EVEN - PROCESS (PID = 2)

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// Process Table - even
[PROCESS_TABLE + 32 + 1] = 2; // PID of even process
[PROCESS_TABLE + 32 + 4] = CREATED;
[PROCESS_TABLE + 32 + 11] = 87; // User area page no - even
[PROCESS_TABLE + 32 + 13] = 8*512; // UPTR
[PROCESS_TABLE + 32 + 14] = PTBR; // even
[PROCESS_TABLE + 32 + 15] = PTLR; // even
[PROCESS_TABLE + 32 + 12] = 0; // KPTR - even

// IP when init program starts (Entry Point)
[86*512] = [83 * 512 + 1]; // 2nd entry of page header



// Page Table  PRIME - PROCESS (PID = 3)

// PTBR = PAGE_TABLE_BASE + 60;
// PTLR = 10;

// // Library
// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";

// // Heap
// [PTBR+4] = 88;
// [PTBR+5] = "0110";
// [PTBR+6] = 89;
// [PTBR+7] = "0110";

// // Code
// [PTBR+8] = 92;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0000";
// [PTBR + 12] = -1;
// [PTBR + 13] = "0000";
// [PTBR + 14] = -1;
// [PTBR + 15] = "0000";

// // Stack
// [PTBR+16] = 90;
// [PTBR+17] = "0110";
// [PTBR+18] = -1;
// [PTBR+19] = "0000";

// // Process Table - even
// [PROCESS_TABLE + 48 + 1] = 3; // PID of even process
// [PROCESS_TABLE + 48 + 4] = CREATED;
// [PROCESS_TABLE + 48 + 11] = 91; // User area page no - even
// [PROCESS_TABLE + 48 + 13] = 8*512; // UPTR
// [PROCESS_TABLE + 48 + 14] = PTBR; // even
// [PROCESS_TABLE + 48 + 15] = PTLR; // even
// [PROCESS_TABLE + 48 + 12] = 0; // KPTR - even

// // IP when init program starts (Entry Point)
// [90*512] = [92 * 512 + 1]; // 2nd entry of page header

// Set Process table entries from 3 to TERMINATED
alias i R0;
i = 3;
while (i < 16) do
  [PROCESS_TABLE + i*16 + 4] = TERMINATED;
  i = i + 1;
endwhile;

return;