alias functionNum R1;
alias currentPID R2;
alias word R3;

if (functionNum == 3) then // terminal write
  multipush(R1, R2, R3);

  functionNum = 8; // aquire terminal
  call MOD_0;

  multipop(R1, R2, R3);

  print word;

  multipush(R1, R2, R3);

  functionNum = 9; // release terminal
  call MOD_0;

  alias retVal R4;
  retVal = R0;

  multipop(R1, R2, R3);
  return;

else
if (functionNum == 4) then // terminal_read
  multipush(R1, R2, R3);

  functionNum = 8; // aquire terminal
  call MOD_0;

  multipop(R1, R2, R3);

  read;

  // set status of currentPID to wait_terminal
  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;

  // calling scheduler
  multipush(R1, R2, R3);
  call MOD_5;

  multipop(R1, R2, R3);

  // convert word logical address to physical
  // and storing the value in the input buffer
  [[PTBR + 2 * (word / 512)] * 512 + (word % 512)] = [PROCESS_TABLE + currentPID*16 + 8];
  
  return;
  
else
if (functionNum == 2) then // disk_load function
  alias pageNo R3;
  alias blockNo R4;

  // aquire disk - resource manager
  multipush(R1, R2, R3, R4);
  functionNum = 3;
  call MOD_0;
  multipop(R1, R2, R3, R4);

  // set disk status table
  [DISK_STATUS_TABLE + 1] = 0; // load bit
  [DISK_STATUS_TABLE + 2] = pageNo;
  [DISK_STATUS_TABLE + 3] = blockNo;

  // calling load statement
  load(pageNo, blockNo);

  // set process state to wait_disk
  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

  // calling scheduler
  call MOD_5;

  return;
  
else
  return;
endif;
endif;
endif;