// get current process ID
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

// stores BP to Kernal Stack
multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;
newPID = currentPID + 1;
alias newProcessTable R3;
while (newPID < 16) do
  alias newProcessState R4;
  newProcessTable = PROCESS_TABLE + newPID * 16;
  newProcessState = [newProcessTable + 4];
  if (newProcessState == READY || newProcessState == CREATED) then
    break;
  endif;
  newPID = newPID + 1;
endwhile;

if (newPID == 16) then
  newProcessTable = PROCESS_TABLE;
  newPID = 0;
endif;

SP = [newProcessTable + 11] * 512 + [newProcessTable + 12];
PTBR = [newProcessTable + 14];
PTLR = [newProcessTable + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if ([newProcessTable + 4] == CREATED) then
  SP = [newProcessTable + 13];
  [newProcessTable + 9] = 0;
  [newProcessTable + 4] = RUNNING;
  ireturn;
endif;

[newProcessTable + 4] = RUNNING;

multipop(BP);

return;