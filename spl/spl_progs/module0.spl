alias functionNum R1;
alias currentPID R2;
alias retVal R0;

if (functionNum == 8) then // aquire terminal
  while ([TERMINAL_STATUS_TABLE] == 1) do // terminal status - busy
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
    multipush (R1, R2);
    
    call MOD_5; // calling scheduler
    
    multipop (R1, R2);
  endwhile;

  [TERMINAL_STATUS_TABLE + 0] = 1;
  [TERMINAL_STATUS_TABLE + 1] = currentPID;
  return;
else
if (functionNum == 9) then // release terminal
  if (currentPID == [TERMINAL_STATUS_TABLE + 1]) then
    [TERMINAL_STATUS_TABLE + 0] = 0;
    
    // setting all WAIT_TERMINAL to READY
    alias i R3;
    i = 0;
    while (i < 16) do
      if ([PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL) then
        [PROCESS_TABLE + i*16 + 4] = READY;
      endif;
      i = i + 1;
    endwhile;

    retVal = 0;
    return;
  else
    retVal = -1;
    return;
  endif;
else
if (functionNum == 3) then // aquire disk
  while ([DISK_STATUS_TABLE + 0] == 1) do // disk status - busy
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    multipush (R1, R2);
    
    call MOD_5; // calling scheduler
    
    multipop (R1, R2);
  endwhile;

  [DISK_STATUS_TABLE + 0] = 1;
  [DISK_STATUS_TABLE + 4] = currentPID;
  return;
endif;
endif;
endif;