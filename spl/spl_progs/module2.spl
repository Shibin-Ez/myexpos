alias functionNum R1;

if (functionNum == 1) then // get free page
  // increment wait mem count by 1
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

  // till mem free count is 0
  while ([SYSTEM_STATUS_TABLE + 2] == 0) do
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;

    // invoke scheduler
    multipush(R1);
    call MOD_5;
    multipop(R1);
  endwhile;

  // decrement wait mem count, mem free count
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
  [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

  // find a free page
  alias i R3;
  i = 76;
  while (i < MAX_MEM_PAGE) do
    if ([MEMORY_FREE_LIST + i] == 0) then
      [MEMORY_FREE_LIST + i] = 1;
      break;
    endif;
    i = i + 1;
  endwhile;

  alias free_page_retVal R0;
  free_page_retVal = i;

  return;

else
if (functionNum == 2) then // release page
  alias page_no R2;
  [MEMORY_FREE_LIST + page_no] = [MEMORY_FREE_LIST + page_no] - 1;
  if ([MEMORY_FREE_LIST + page_no] == 0) then
    // increment mem free count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1; // disk free count
  endif;

  alias pid R3;
  pid = 0;
  while (pid < 16) do
    if ([PROCESS_TABLE + pid * 16 + 4] == WAIT_MEM) then
      [PROCESS_TABLE + pid * 16 + 4] = READY;
    endif;

    pid = pid + 1;
  endwhile;

  return;
endif;
endif;